@page "/auth/callback"
@using goose2s.State
@using Microsoft.Extensions.Configuration
@inject NavigationManager navManager
@inject IConfiguration config
@using goose2s.Services
@inject ProfileService profile

<div>Logging in, please wait ... flap</div>
<div style="display:none">
    <div>
        authocde is @authCode
    </div>
    <div>
        state is @state
    </div>
    @if (authResponse != null && !authResponse.Failure) {
    <div>
        Auth Resp is @authResponse.access_token
    </div>
    <div>
    Expires in  @authResponse.expires_in
    </div>
    }
    @if (authResponse != null && authResponse.Failure) {
        <div> 
            Buggery refresh fool??? You can only use that damn code one time to honk a flapping token
        </div>
    }
</div>


@code {
    [CascadingParameter]
    private SpotifyStateProvider SpotifyStateProvider { get; set; }

    private Uri uri = new Uri("http://idiots");
    private string authCode = "";
    private string state = "";
    private SpotifyAuthResponse authResponse = null;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
        //should have some honky time with the request!
            uri = navManager.ToAbsoluteUri(navManager.Uri); //you can use IURIHelper for older versions

            var gosling = QueryHelpers.ParseQuery(uri.Query);
            authCode = gosling["code"];
            state = gosling["state"];
            
            authResponse = await AuthActions.GetToken(config, authCode);
            StateHasChanged();
            authResponse.state = state;

            var userProfile = await profile.GetUserProfile(authResponse.access_token);

            SpotifyStateProvider.CurrentContext = new SpotifyContext {
                Auth = authResponse,
                User = userProfile
            };
            await SpotifyStateProvider.SaveChangesAsync();

            SpotifyStateProvider.Login();

            navManager.NavigateTo("/");
        }
    }
}