#pragma checksum "C:\src\goose2s\State\SpotifyStateProvider.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1661df46954fe3a97c900a22629a98e783fdd79f"
// <auto-generated/>
#pragma warning disable 1591
namespace goose2s.State
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\src\goose2s\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\src\goose2s\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\src\goose2s\_Imports.razor"
using goose2s;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\src\goose2s\_Imports.razor"
using goose2s.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\src\goose2s\_Imports.razor"
using Microsoft.AspNetCore.WebUtilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\src\goose2s\State\SpotifyStateProvider.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\src\goose2s\State\SpotifyStateProvider.razor"
using Microsoft.Extensions.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\src\goose2s\State\SpotifyStateProvider.razor"
using goose2s.Models;

#line default
#line hidden
#nullable disable
    public partial class SpotifyStateProvider : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
#nullable restore
#line 8 "C:\src\goose2s\State\SpotifyStateProvider.razor"
 if (_hasLoaded)
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(0, "    ");
            __Blazor.goose2s.State.SpotifyStateProvider.TypeInference.CreateCascadingValue_0(__builder, 1, 2, 
#nullable restore
#line 10 "C:\src\goose2s\State\SpotifyStateProvider.razor"
                            this

#line default
#line hidden
#nullable disable
            , 3, (__builder2) => {
                __builder2.AddMarkupContent(4, "\r\n        ");
                __builder2.AddContent(5, 
#nullable restore
#line 11 "C:\src\goose2s\State\SpotifyStateProvider.razor"
         ChildContent

#line default
#line hidden
#nullable disable
                );
                __builder2.AddMarkupContent(6, "\r\n    ");
            }
            );
            __builder.AddMarkupContent(7, "\r\n");
#nullable restore
#line 13 "C:\src\goose2s\State\SpotifyStateProvider.razor"
}
else
{

#line default
#line hidden
#nullable disable
            __builder.AddContent(8, "    ");
            __builder.AddMarkupContent(9, "<p>Loading...</p>\r\n");
#nullable restore
#line 17 "C:\src\goose2s\State\SpotifyStateProvider.razor"
}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 19 "C:\src\goose2s\State\SpotifyStateProvider.razor"
       
    private bool _hasLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public SpotifyContext CurrentContext { get; set; }
    private bool RefreshingAccessToken {get;set;}

    public SpotifyStateProvider()
    {
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentContext = await ProtectedSessionStore.GetAsync<SpotifyContext>("auth");
        _hasLoaded = true;
        if (!RefreshingAccessToken) {
            SetupRefresh();
        }
    }

    public async Task SaveChangesAsync()
    {
        await ProtectedSessionStore.SetAsync("auth", CurrentContext);
    }

    public void SetupRefresh() {
        InvokeAsync(async() => {
            RefreshingAccessToken = true;
            await Task.Delay((CurrentContext.Auth.expires_in-10)*1000);
            if (CurrentContext != null && !CurrentContext.Auth.Failure) {
                var newToken = await AuthActions.RefreshToken(config, CurrentContext.Auth.refresh_token);
                CurrentContext.Auth.access_token = newToken.access_token;
                CurrentContext.Auth.expires_in = newToken.expires_in;

                await SaveChangesAsync();
            }
        });
    }

    public static QueueItem[] QueueMem = new QueueItem[0];
    public QueueItem[] _queue { get => QueueMem; set => QueueMem = value;}
    public static QueueItem[] ActiveQueue { get; set; }

    public static UserProfile[] ActiveUserMem = new UserProfile[0];
    public static UserProfile[] ActiveUsers { get => ActiveUserMem; set => ActiveUserMem = value; }

    public void Login() {
        var aul = new List<UserProfile>(ActiveUsers);
        if (!aul.Any(u => u.id == CurrentContext.User.id))
        {
            CurrentContext.User.HeartBeat = DateTime.UtcNow.Ticks;
            aul.Add(CurrentContext.User);
            

            ActiveUsers = aul.ToArray();
            this.StateHasChanged();
        }
    }

    public async Task Logout() 
    {        
        await ProtectedSessionStore.DeleteAsync("auth");
        CurrentContext = null;
        StateHasChanged();
    }
    public void HeartBeat() {
        if (CurrentContext != null && CurrentContext.User != null) {
            if (ActiveUsers.Any(u => u.id == CurrentContext.User.id)) {
                ActiveUsers.First(u => u.id == CurrentContext.User.id).HeartBeat = DateTime.UtcNow.Ticks;
                this.StateHasChanged();
            }
            else {
                // not logged in or just honked
            }
        }
        var aul = new List<UserProfile>(ActiveUsers);
        if (!aul.Any(u => u.HeartBeat < DateTime.UtcNow.AddMinutes(-30d).Ticks)) {
            ActiveUsers = aul.Where(u => u.HeartBeat >= DateTime.UtcNow.AddMinutes(-30d).Ticks).ToArray();
        }
    }
    public void Enqueue(string flock, SpotifyItem track)
    {
        try 
        {

        var entity = new QueueItem(flock, DateTime.UtcNow)
        {
            ArtistName = string.Join(", ", track.artists.Select(a => a.name)),
            DurationMs = track.duration_ms,
            Image = track.album.images.OrderBy(i => i.height).First().url,
            Popularity = track.popularity,
            TrackId = track.id,
            TrackName = track.name,
            Votes = 0,
            EnqueuedBy = CurrentContext.User
        };

        var q = new List<QueueItem>(_queue);
        q.Add(entity);
        this._queue = q.ToArray();

        BuildActiveQueue(flock);
        
        this.StateHasChanged();
        }
        catch (Exception ex) 
        {

        }
    }

    public void UpVoteItemInQueue(string flock, QueueItem qi) 
    {
        if (_queue.Any(q => q.Equals(qi)))
        {
            var upvotable = _queue.First(q => q.Equals(qi));
            upvotable.Votes++;

            BuildActiveQueue(flock);
        
            this.StateHasChanged();
        }
    }

    public void DiscardEnqueued(string flock, QueueItem qi) {
        if (_queue.Any(q => q.Equals(qi)))
        {
            var discardable = _queue.First(q => q.Equals(qi));
            var truncatable = new List<QueueItem>(_queue);
            if (truncatable.Remove(discardable))
            {
                _queue = truncatable.ToArray();
                BuildActiveQueue(flock);            
                this.StateHasChanged();
            }
        }
    }

    private void BuildActiveQueue(string flock) {
        ActiveQueue = _queue
            .Where(qi => qi.PartitionKey == flock && qi.PlayCommenced > 0L && qi.PlayConcluded == 0L)//started
            .Union(
                _queue.Where(qi => qi.PlayCommenced == 0L)
                    .OrderByDescending(qi => qi.Votes)
                    .ThenBy(qi => qi.RowKey)
            )
            .ToArray();
    }

    public async Task<QueueItem[]> GetQueue(string flock)
    {
        if (ActiveQueue == null)
            return null;

        return ActiveQueue.Where(qi => qi.PlayConcluded == 0L).ToArray();
    }

    public async Task<QueueItem> GetFirst(string flock)
    {
        if (ActiveQueue == null)
            return null;

        return ActiveQueue.Where(qi => qi.PlayConcluded  == 0L).FirstOrDefault();

    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IConfiguration config { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedSessionStorage ProtectedSessionStore { get; set; }
    }
}
namespace __Blazor.goose2s.State.SpotifyStateProvider
{
    #line hidden
    internal static class TypeInference
    {
        public static void CreateCascadingValue_0<TValue>(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder, int seq, int __seq0, TValue __arg0, int __seq1, global::Microsoft.AspNetCore.Components.RenderFragment __arg1)
        {
        __builder.OpenComponent<global::Microsoft.AspNetCore.Components.CascadingValue<TValue>>(seq);
        __builder.AddAttribute(__seq0, "Value", __arg0);
        __builder.AddAttribute(__seq1, "ChildContent", __arg1);
        __builder.CloseComponent();
        }
    }
}
#pragma warning restore 1591
