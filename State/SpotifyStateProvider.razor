@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using goose2s.Models
@namespace goose2s.State
@inject ProtectedSessionStorage ProtectedSessionStore

@if (_hasLoaded)
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
}
else
{
    <p>Loading...</p>
}

@code {
    private bool _hasLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public SpotifyAuthResponse CurrentContext { get; set; }

    public SpotifyStateProvider()
    {
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentContext = await ProtectedSessionStore.GetAsync<SpotifyAuthResponse>("auth");
        _hasLoaded = true;
    }

    public async Task SaveChangesAsync()
    {
        await ProtectedSessionStore.SetAsync("auth", CurrentContext);
    }

    public static QueueItem[] QueueMem = new QueueItem[0];
    public QueueItem[] _queue { get => QueueMem; set => QueueMem = value;}
    public static QueueItem[] ActiveQueue { get; set; }


    public void Enqueue(string flock, SpotifyItem track)
    {
        try 
        {

        var entity = new QueueItem(flock, DateTime.UtcNow)
        {
            ArtistName = string.Join(", ", track.artists.Select(a => a.name)),
            DurationMs = track.duration_ms,
            Image = track.album.images.OrderBy(i => i.height).First().url,
            Popularity = track.popularity,
            TrackId = track.id,
            TrackName = track.name,
            Votes = 0
        };

        var q = new List<QueueItem>(_queue);
        q.Add(entity);
        this._queue = q.ToArray();

        ActiveQueue = _queue
            .Where(qi => qi.PartitionKey == flock
                            && qi.PlayConcluded == 0L)
            .ToArray();
        
        this.StateHasChanged();
        }
        catch (Exception ex) 
        {

        }
    }

    public async Task<QueueItem[]> GetQueue(string flock)
    {
        return ActiveQueue;
    }

    public async Task<QueueItem> GetFirst(string flock)
    {
        if (ActiveQueue == null)
            return null;

        return ActiveQueue.Where(qi => qi.PlayConcluded  == 0L).FirstOrDefault();

    }
}