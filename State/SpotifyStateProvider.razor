@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using Microsoft.Extensions.Configuration
@using goose2s.Models
@namespace goose2s.State
@inject ProtectedSessionStorage ProtectedSessionStore
@inject IConfiguration config

@if (_hasLoaded)
{
    <CascadingValue Value="@this">
        @ChildContent
    </CascadingValue>
}
else
{
    <p>Loading...</p>
}

@code {
    private bool _hasLoaded;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public SpotifyContext CurrentContext { get; set; }
    private bool RefreshingAccessToken {get;set;}
    private System.Threading.Timer refreshTimer=null;

    public SpotifyStateProvider()
    {
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentContext = await ProtectedSessionStore.GetAsync<SpotifyContext>("auth");
        _hasLoaded = true;
        if (!RefreshingAccessToken) {
            SetupRefresh();
        }
    }

    public async Task SaveChangesAsync()
    {
        await ProtectedSessionStore.SetAsync("auth", CurrentContext);
    }

    public void SetupRefresh() {
        InvokeAsync(async() => {
            RefreshingAccessToken = true;
            await Task.Delay((CurrentContext.Auth.expires_in-10)*1000);
            if (CurrentContext != null && !CurrentContext.Auth.Failure) {
                var newToken = await AuthActions.RefreshToken(config, CurrentContext.Auth.refresh_token);
                CurrentContext.Auth.access_token = newToken.access_token;
                CurrentContext.Auth.expires_in = newToken.expires_in;

                await SaveChangesAsync();
            }
        });
    }

    public static QueueItem[] QueueMem = new QueueItem[0];
    public QueueItem[] _queue { get => QueueMem; set => QueueMem = value;}
    public static QueueItem[] ActiveQueue { get; set; }

    public static UserProfile[] ActiveUserMem = new UserProfile[0];
    public static UserProfile[] ActiveUsers { get => ActiveUserMem; set => ActiveUserMem = value; }

    public void Login() {
        var aul = new List<UserProfile>(ActiveUsers);
        if (!aul.Any(u => u.id == CurrentContext.User.id))
        {
            CurrentContext.User.HeartBeat = DateTime.UtcNow.Ticks;
            aul.Add(CurrentContext.User);
            

            ActiveUsers = aul.ToArray();
            this.StateHasChanged();
        }
    }
    public void HeartBeat() {
        if (CurrentContext != null && CurrentContext.User != null) {
            if (ActiveUsers.Any(u => u.id == CurrentContext.User.id)) {
                ActiveUsers.First(u => u.id == CurrentContext.User.id).HeartBeat = DateTime.UtcNow.Ticks;
                this.StateHasChanged();
            }
            else {
                // not logged in or just honked
            }
        }
    }
    public void Enqueue(string flock, SpotifyItem track)
    {
        try 
        {

        var entity = new QueueItem(flock, DateTime.UtcNow)
        {
            ArtistName = string.Join(", ", track.artists.Select(a => a.name)),
            DurationMs = track.duration_ms,
            Image = track.album.images.OrderBy(i => i.height).First().url,
            Popularity = track.popularity,
            TrackId = track.id,
            TrackName = track.name,
            Votes = 0,
            EnqueuedBy = CurrentContext.User
        };

        var q = new List<QueueItem>(_queue);
        q.Add(entity);
        this._queue = q.ToArray();

        BuildActiveQueue(flock);
        
        this.StateHasChanged();
        }
        catch (Exception ex) 
        {

        }
    }

    public void UpVoteItemInQueue(string flock, QueueItem qi) 
    {
        if (_queue.Any(q => q.Equals(qi)))
        {
            var upvotable = _queue.First(q => q.Equals(qi));
            upvotable.Votes++;

            BuildActiveQueue(flock);
        
            this.StateHasChanged();
        }
    }

    public void DiscardEnqueued(string flock, QueueItem qi) {
        if (_queue.Any(q => q.Equals(qi)))
        {
            var discardable = _queue.First(q => q.Equals(qi));
            var truncatable = new List<QueueItem>(_queue);
            if (truncatable.Remove(discardable))
            {
                _queue = truncatable.ToArray();
                BuildActiveQueue(flock);            
                this.StateHasChanged();
            }
        }
    }

    private void BuildActiveQueue(string flock) {
        ActiveQueue = _queue
            .Where(qi => qi.PartitionKey == flock && qi.PlayCommenced > 0L && qi.PlayConcluded == 0L)//started
            .Union(
                _queue.Where(qi => qi.PlayCommenced == 0L)
                    .OrderByDescending(qi => qi.Votes)
                    .ThenBy(qi => qi.RowKey)
            )
            .ToArray();
    }

    public async Task<QueueItem[]> GetQueue(string flock)
    {
        if (ActiveQueue == null)
            return null;

        return ActiveQueue.Where(qi => qi.PlayConcluded == 0L).ToArray();
    }

    public async Task<QueueItem> GetFirst(string flock)
    {
        if (ActiveQueue == null)
            return null;

        return ActiveQueue.Where(qi => qi.PlayConcluded  == 0L).FirstOrDefault();

    }
}