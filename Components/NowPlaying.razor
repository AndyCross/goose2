@using goose2s.Services
@using goose2s.State
@using goose2s.Models
@using System.Threading

@inject PlaybackService playbackService

@code {
    [CascadingParameter]
    private SpotifyStateProvider spotify { get; set; }
    private long sequenceNumber {get;set;}
    public double SecondsLeft = 0D;
    public double Position = 0D;
    public int Percentage = 0;
    public bool RefreshReseekComplete = false;
    private Models.QueueItem nowPlaying = default(Models.QueueItem);
    public async Task<QueueItem> Tick()
    {
        if (nowPlaying == null || nowPlaying.PlayConcluded > 0L)
        {
            return await SetupNextTrack();
        }
        else if (nowPlaying.PlayCommenced != 0L && (nowPlaying.PlayConcluded == 0L && (nowPlaying.PlayCommenced + (nowPlaying.DurationMs * 10000L) < DateTime.UtcNow.Ticks)))
        {
            nowPlaying.PlayConcluded = DateTime.UtcNow.Ticks;
            return await SetupNextTrack();
        }
        return nowPlaying;
    }
    private async Task<QueueItem> SetupNextTrack()
    {
        var currentQueue = await spotify.GetFirst("static");
        if (currentQueue != null && nowPlaying != currentQueue)
            {
                nowPlaying = currentQueue;
                //this is a honking race - nowPlaying is statically across all threads
                //so only one winner does this
                if (nowPlaying.PlayCommenced == 0L) {
                    nowPlaying.PlayCommenced = DateTime.UtcNow.Ticks;
                }
                await TrackChanged(nowPlaying);
            }
        return nowPlaying;
    }
    private async Task TrackChanged(QueueItem track) {
        if (!RefreshReseekComplete)//catchup ketchup catsup 
        {
            var Position = (DateTime.UtcNow - new DateTime(nowPlaying.PlayCommenced, DateTimeKind.Utc)).TotalSeconds;
            await playbackService.Play(track.TrackId, (int)Position * 1000, spotify.CurrentContext.access_token);
            
            RefreshReseekComplete = true;
        }
        else {             
            await playbackService.Play(track.TrackId, spotify.CurrentContext.access_token);
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    { 
        nowPlaying = await Tick();
        if (nowPlaying != null) 
        {
            Position = (DateTime.UtcNow - new DateTime(nowPlaying.PlayCommenced, DateTimeKind.Utc)).TotalSeconds;
            SecondsLeft = (new DateTime(nowPlaying.PlayCommenced, DateTimeKind.Utc).AddMilliseconds(nowPlaying.DurationMs) - DateTime.UtcNow).TotalSeconds;
            Percentage = (int)Math.Round((Position/(nowPlaying.DurationMs/1000))*100);
           
            StateHasChanged();
        }       
    }

    private string Humanize(double secondsLeft)
    {
        if (secondsLeft < 60D)
        {
            return $"{secondsLeft:0.##} seconds left";
        }
        return $"{secondsLeft / 60d:0} minutes left";
    }
}

<div class="media">
    <img class="mr-3" src="@nowPlaying?.Image" alt="@nowPlaying?.TrackName">
    <div class="media-body">        
        <h5 class="mt-0">@nowPlaying?.TrackName</h5>
        @if (SecondsLeft > 0) {
            <span class="text-nowrap">
                @Humanize(SecondsLeft)
            </span>
            @if (!RefreshReseekComplete) {
                <span class="text-nowrap">Nothing playing yet, add something to the queue or wait while we catch up... honk</span>
            }
            <goose2s.Components.Meter Level="@Percentage" />
        }
        else {
            <span>Stopped</span>
        }
    </div>
</div>