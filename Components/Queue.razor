@using goose2s.Services
@using goose2s.State
@using goose2s.Models

@code {
    [CascadingParameter]
    private SpotifyStateProvider spotify { get; set; }
    private QueueItem[] _queue {get;set;}

    [Parameter]
    public Action<QueueItem> TrackChanged { get; set; }

    private void Yield(MouseEventArgs eventArgs, QueueItem item) {
        TrackChanged?.Invoke(item);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    { 
        var results = await spotify.GetQueue("static");
        _queue = results;
        StateHasChanged();
    }

}

<div>
</div>

@if (_queue == null)
{
    <p><em>The queue's empty - add something</em></p>
}
else
{
<div>
    <table class="core">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Artist</th>
                <th>Enqueued By</th>
                <th>Popularity</th>
            </tr>
        </thead>
        <tbody>            
    @foreach (var result in _queue)
    {
        string playStyle = "";
        if (result.PlayCommenced > 0L) {
            playStyle = "border: 1px solid #6f42c1;";
        }
        if (result.PlayConcluded > 0L) {
            playStyle += "background-color: #eeeeee";
        }
            <tr style="@playStyle">
                <td><img src="@result.Image" /></td>
                <td>@result.TrackName</td>
                <td>@result.ArtistName</td>  
                <td>@result.EnqueuedBy.display_name</td>
                <td>
                    <Meter Level="@result.Popularity"/>
                </td>      
            </tr>
    }
        </tbody>
    </table>
</div>
}